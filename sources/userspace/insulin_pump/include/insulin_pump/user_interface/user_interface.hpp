// ---------------------------------------------------------------------------------------------------------------------
/// \file user_interface.hpp
/// \date 19. 03. 2023
/// \author Jaroslav Rosa (rosajaro1352@gmail.com)
///
/// \brief This file defines general user interface. 
// ---------------------------------------------------------------------------------------------------------------------

#pragma once

// STL imports (excluded from Doxygen)
/// \cond
#include <stdstring.h>
//#include "stdstring.h"

#include "../../../include/insulin_pump/pump_settings/pump_settings.hpp"
/// \endcond

// -----------------------------------------------------------------------------------------------------------------
/// \class IUser_Interface
/// \brief 
///
/// 
// -----------------------------------------------------------------------------------------------------------------
class IUser_Interface
{
public:

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Creates an instance of the class.
	// -------------------------------------------------------------------------------------------------------------
	IUser_Interface();

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Destroys (deletes) the object from the memory.
	// -------------------------------------------------------------------------------------------------------------
	virtual ~IUser_Interface();

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Deleted copy constructor (rule of five).
	// -------------------------------------------------------------------------------------------------------------
	//IUser_Interface(const IUser_Interface&) = delete;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Deleted assignment operator (rule of five).
	/// \return Instance of this class
	// -------------------------------------------------------------------------------------------------------------
	//IUser_Interface& operator=(const IUser_Interface&) = delete;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Deleted move constructor (rule of five).
	// -------------------------------------------------------------------------------------------------------------
	//IUser_Interface(IUser_Interface&&) = delete;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Deleted assignment operator with an r-value reference (rule of five).
	/// \return Instance of this class
	// -------------------------------------------------------------------------------------------------------------
	//IUser_Interface& operator=(IUser_Interface&&) = delete;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Initialize user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual void Initialize() = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Restarts user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual void Restart() = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Restarts user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual bool Test() = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Displays message in user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual void DisplayMessage(const char* message, uint16_t length) = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Reads input from user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual float GetUserInput() = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Waits for confirmation from user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual bool GetUserConfirmation() = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Calls warning notification in user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual void ShowWarning(const char* warning_text, uint16_t length) = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Calls error notification in user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual void ShowError(const char* error_text, uint16_t length) = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Calls critical error notification in user interface
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	virtual void ShowCriticalError(const char* critical_error_text, uint16_t length) = 0;

	// -------------------------------------------------------------------------------------------------------------
	/// \brief Registers callback for user interupt from a pressed key
	///
	/// 
	///
	// -------------------------------------------------------------------------------------------------------------
	//virtual void RegisterButtonPressCallback(void (*callback)(Pump_Settings& pump_settings, IUser_Interface& ui, bool& bolus_programmed), uint16_t button_id) = 0;
};